r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Messaging
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from datetime import datetime
from typing import Any, Dict, List, Optional, Union, Iterator, AsyncIterator
from twilio.base import deserialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page


class DestinationAlphaSenderInstance(InstanceResource):
    """
    :ivar sid: The unique string that we created to identify the AlphaSender resource.
    :ivar account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AlphaSender resource.
    :ivar service_sid: The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) the resource is associated with.
    :ivar date_created: The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    :ivar date_updated: The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    :ivar alpha_sender: The Alphanumeric Sender ID string.
    :ivar capabilities: An array of values that describe whether the number can receive calls or messages. Can be: `SMS`.
    :ivar url: The absolute URL of the AlphaSender resource.
    :ivar iso_country_code: The Two Character ISO Country Code the Alphanumeric Sender ID will be used for. For Default Alpha Senders that work across countries, this value will be an empty string
    """

    def __init__(
        self,
        version: Version,
        payload: Dict[str, Any],
        service_sid: str,
        sid: Optional[str] = None,
    ):
        super().__init__(version)

        self.sid: Optional[str] = payload.get("sid")
        self.account_sid: Optional[str] = payload.get("account_sid")
        self.service_sid: Optional[str] = payload.get("service_sid")
        self.date_created: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_created")
        )
        self.date_updated: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_updated")
        )
        self.alpha_sender: Optional[str] = payload.get("alpha_sender")
        self.capabilities: Optional[List[str]] = payload.get("capabilities")
        self.url: Optional[str] = payload.get("url")
        self.iso_country_code: Optional[str] = payload.get("iso_country_code")

        self._solution = {
            "service_sid": service_sid,
            "sid": sid or self.sid,
        }
        self._context: Optional[DestinationAlphaSenderContext] = None

    @property
    def _proxy(self) -> "DestinationAlphaSenderContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: DestinationAlphaSenderContext for this DestinationAlphaSenderInstance
        """
        if self._context is None:
            self._context = DestinationAlphaSenderContext(
                self._version,
                service_sid=self._solution["service_sid"],
                sid=self._solution["sid"],
            )
        return self._context

    def delete(self) -> bool:
        """
        Deletes the DestinationAlphaSenderInstance


        :returns: True if delete succeeds, False otherwise
        """
        return self._proxy.delete()

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the DestinationAlphaSenderInstance


        :returns: True if delete succeeds, False otherwise
        """
        return await self._proxy.delete_async()

    def fetch(self) -> "DestinationAlphaSenderInstance":
        """
        Fetch the DestinationAlphaSenderInstance


        :returns: The fetched DestinationAlphaSenderInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "DestinationAlphaSenderInstance":
        """
        Asynchronous coroutine to fetch the DestinationAlphaSenderInstance


        :returns: The fetched DestinationAlphaSenderInstance
        """
        return await self._proxy.fetch_async()

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.DestinationAlphaSenderInstance {}>".format(context)


class DestinationAlphaSenderContext(InstanceContext):

    def __init__(self, version: Version, service_sid: str, sid: str):
        """
        Initialize the DestinationAlphaSenderContext

        :param version: Version that contains the resource
        :param service_sid: The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the resource from.
        :param sid: The SID of the AlphaSender resource to fetch.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "service_sid": service_sid,
            "sid": sid,
        }
        self._uri = "/Services/{service_sid}/DestinationAlphaSenders/{sid}".format(
            **self._solution
        )

    def delete(self) -> bool:
        """
        Deletes the DestinationAlphaSenderInstance


        :returns: True if delete succeeds, False otherwise
        """

        headers = values.of({})

        return self._version.delete(method="DELETE", uri=self._uri, headers=headers)

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the DestinationAlphaSenderInstance


        :returns: True if delete succeeds, False otherwise
        """

        headers = values.of({})

        return await self._version.delete_async(
            method="DELETE", uri=self._uri, headers=headers
        )

    def fetch(self) -> DestinationAlphaSenderInstance:
        """
        Fetch the DestinationAlphaSenderInstance


        :returns: The fetched DestinationAlphaSenderInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(method="GET", uri=self._uri, headers=headers)

        return DestinationAlphaSenderInstance(
            self._version,
            payload,
            service_sid=self._solution["service_sid"],
            sid=self._solution["sid"],
        )

    async def fetch_async(self) -> DestinationAlphaSenderInstance:
        """
        Asynchronous coroutine to fetch the DestinationAlphaSenderInstance


        :returns: The fetched DestinationAlphaSenderInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, headers=headers
        )

        return DestinationAlphaSenderInstance(
            self._version,
            payload,
            service_sid=self._solution["service_sid"],
            sid=self._solution["sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.DestinationAlphaSenderContext {}>".format(context)


class DestinationAlphaSenderPage(Page):

    def get_instance(self, payload: Dict[str, Any]) -> DestinationAlphaSenderInstance:
        """
        Build an instance of DestinationAlphaSenderInstance

        :param payload: Payload response from the API
        """
        return DestinationAlphaSenderInstance(
            self._version, payload, service_sid=self._solution["service_sid"]
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Messaging.V1.DestinationAlphaSenderPage>"


class DestinationAlphaSenderList(ListResource):

    def __init__(self, version: Version, service_sid: str):
        """
        Initialize the DestinationAlphaSenderList

        :param version: Version that contains the resource
        :param service_sid: The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the resources from.

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "service_sid": service_sid,
        }
        self._uri = "/Services/{service_sid}/DestinationAlphaSenders".format(
            **self._solution
        )

    def create(
        self, alpha_sender: str, iso_country_code: Union[str, object] = values.unset
    ) -> DestinationAlphaSenderInstance:
        """
        Create the DestinationAlphaSenderInstance

        :param alpha_sender: The Alphanumeric Sender ID string. Can be up to 11 characters long. Valid characters are A-Z, a-z, 0-9, space, hyphen `-`, plus `+`, underscore `_` and ampersand `&`. This value cannot contain only numbers.
        :param iso_country_code: The Optional Two Character ISO Country Code the Alphanumeric Sender ID will be used for. If the IsoCountryCode is not provided, a default Alpha Sender will be created that can be used across all countries.

        :returns: The created DestinationAlphaSenderInstance
        """

        data = values.of(
            {
                "AlphaSender": alpha_sender,
                "IsoCountryCode": iso_country_code,
            }
        )
        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = self._version.create(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return DestinationAlphaSenderInstance(
            self._version, payload, service_sid=self._solution["service_sid"]
        )

    async def create_async(
        self, alpha_sender: str, iso_country_code: Union[str, object] = values.unset
    ) -> DestinationAlphaSenderInstance:
        """
        Asynchronously create the DestinationAlphaSenderInstance

        :param alpha_sender: The Alphanumeric Sender ID string. Can be up to 11 characters long. Valid characters are A-Z, a-z, 0-9, space, hyphen `-`, plus `+`, underscore `_` and ampersand `&`. This value cannot contain only numbers.
        :param iso_country_code: The Optional Two Character ISO Country Code the Alphanumeric Sender ID will be used for. If the IsoCountryCode is not provided, a default Alpha Sender will be created that can be used across all countries.

        :returns: The created DestinationAlphaSenderInstance
        """

        data = values.of(
            {
                "AlphaSender": alpha_sender,
                "IsoCountryCode": iso_country_code,
            }
        )
        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = await self._version.create_async(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return DestinationAlphaSenderInstance(
            self._version, payload, service_sid=self._solution["service_sid"]
        )

    def stream(
        self,
        iso_country_code: Union[str, object] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> Iterator[DestinationAlphaSenderInstance]:
        """
        Streams DestinationAlphaSenderInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param str iso_country_code: Optional filter to return only alphanumeric sender IDs associated with the specified two-character ISO country code.
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            iso_country_code=iso_country_code, page_size=limits["page_size"]
        )

        return self._version.stream(page, limits["limit"])

    async def stream_async(
        self,
        iso_country_code: Union[str, object] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> AsyncIterator[DestinationAlphaSenderInstance]:
        """
        Asynchronously streams DestinationAlphaSenderInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param str iso_country_code: Optional filter to return only alphanumeric sender IDs associated with the specified two-character ISO country code.
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            iso_country_code=iso_country_code, page_size=limits["page_size"]
        )

        return self._version.stream_async(page, limits["limit"])

    def list(
        self,
        iso_country_code: Union[str, object] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[DestinationAlphaSenderInstance]:
        """
        Lists DestinationAlphaSenderInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param str iso_country_code: Optional filter to return only alphanumeric sender IDs associated with the specified two-character ISO country code.
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return list(
            self.stream(
                iso_country_code=iso_country_code,
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(
        self,
        iso_country_code: Union[str, object] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[DestinationAlphaSenderInstance]:
        """
        Asynchronously lists DestinationAlphaSenderInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param str iso_country_code: Optional filter to return only alphanumeric sender IDs associated with the specified two-character ISO country code.
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return [
            record
            async for record in await self.stream_async(
                iso_country_code=iso_country_code,
                limit=limit,
                page_size=page_size,
            )
        ]

    def page(
        self,
        iso_country_code: Union[str, object] = values.unset,
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> DestinationAlphaSenderPage:
        """
        Retrieve a single page of DestinationAlphaSenderInstance records from the API.
        Request is executed immediately

        :param iso_country_code: Optional filter to return only alphanumeric sender IDs associated with the specified two-character ISO country code.
        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of DestinationAlphaSenderInstance
        """
        data = values.of(
            {
                "IsoCountryCode": iso_country_code,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        response = self._version.page(
            method="GET", uri=self._uri, params=data, headers=headers
        )
        return DestinationAlphaSenderPage(self._version, response, self._solution)

    async def page_async(
        self,
        iso_country_code: Union[str, object] = values.unset,
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> DestinationAlphaSenderPage:
        """
        Asynchronously retrieve a single page of DestinationAlphaSenderInstance records from the API.
        Request is executed immediately

        :param iso_country_code: Optional filter to return only alphanumeric sender IDs associated with the specified two-character ISO country code.
        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of DestinationAlphaSenderInstance
        """
        data = values.of(
            {
                "IsoCountryCode": iso_country_code,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data, headers=headers
        )
        return DestinationAlphaSenderPage(self._version, response, self._solution)

    def get_page(self, target_url: str) -> DestinationAlphaSenderPage:
        """
        Retrieve a specific page of DestinationAlphaSenderInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of DestinationAlphaSenderInstance
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return DestinationAlphaSenderPage(self._version, response, self._solution)

    async def get_page_async(self, target_url: str) -> DestinationAlphaSenderPage:
        """
        Asynchronously retrieve a specific page of DestinationAlphaSenderInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of DestinationAlphaSenderInstance
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return DestinationAlphaSenderPage(self._version, response, self._solution)

    def get(self, sid: str) -> DestinationAlphaSenderContext:
        """
        Constructs a DestinationAlphaSenderContext

        :param sid: The SID of the AlphaSender resource to fetch.
        """
        return DestinationAlphaSenderContext(
            self._version, service_sid=self._solution["service_sid"], sid=sid
        )

    def __call__(self, sid: str) -> DestinationAlphaSenderContext:
        """
        Constructs a DestinationAlphaSenderContext

        :param sid: The SID of the AlphaSender resource to fetch.
        """
        return DestinationAlphaSenderContext(
            self._version, service_sid=self._solution["service_sid"], sid=sid
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Messaging.V1.DestinationAlphaSenderList>"
